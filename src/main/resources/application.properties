# Configure the View Resolver
spring.mvc.view.prefix=/WEB-INF/web_interface/
spring.mvc.view.suffix=.jsp

# ========================= #
# DATABASE CONNECTION SETUP #
# ========================= #
# The URL to your database
#spring.datasource.url=jdbc:postgresql://doordiet.cntudlnkkc7a.eu-west-1.rds.amazonaws.com:5432/doordiet
spring.datasource.url=jdbc:postgresql://localhost/doordiet

# User name and Password to your database
spring.datasource.username=doordietmaster
spring.datasource.password=dmxC$ZgYs!1o5Gh

# What Driver to use
spring.datasource.driver-class-name=org.postgresql.Driver

# ============================= #
# DATA JPA - HIBERNATE SETTINGS #
# ============================= #

# To offload the responsibility to create the database tables for our
# entities to the DATA JPA system, we can use the following configuration
spring.jpa.hibernate.ddl-auto=update

# There are 5 possible values we can give this configuration, see below for what each one does
# update      -> update the schema
# create      -> creates the schema, destroying previous data
# create-drop -> creates the schema, drop the schema at the end of the session
# none        -> do nothing
# validate    -> Validate the schema, makes no changes to the database

# NOTE:
# Sometimes in development when rapid changes are made on entities, the database
# tables can become a bit wonky, e.g. you add attributes to entities, change
# data type (e.g. int to Long), etc. If you are having some weird problems you can
# try and set this option to `create` and run the system to force a drop of the schema
# and creation of the schema as it should be.
# ALL THE DATA IN THE DATABASE WILL BE LOST. BACK IT UP IF YOU NEED IT!
# Just remember to revert the option back to `update` or `none` if you want any
# data to be persistent after that.

# Log SQL Statements
spring.jpa.show-sql=true

# ==============================================================
# = Spring Security / Queries for AuthenticationManagerBuilder  
# ==============================================================
spring.queries.users-query=select email, password, active from "user" where email=?
spring.queries.roles-query=select u.email, r.role from "user" u inner join user_role ur on (u.id = ur.user_id) inner join role r on (ur.role_id = r.id) where u.email = ?
